--*********************************************************************************************************************--
--PostgreSQL SERIAL pseudo-type
-- By assigning the SERIAL pseudo-type to the id column, PostgreSQL performs the following:

-- First, create a sequence object and set the next value generated by the sequence as the default value for the column.
-- Second, add a NOT NULL constraint to the id column because a sequence always generates an integer, which is a non-null value.
-- Third, assign the owner of the sequence to the id column; as a result, the sequence object is deleted when the id column or table is dropped
--PostgreSQL provides three serial pseudo-types SMALLSERIAL, SERIAL, and BIGSERIAL 
-- Name	        Storage Size	Range
-- SMALLSERIAL	2 bytes	        1 to 32,767
-- SERIAL	    4 bytes	        1 to 2,147,483,647
-- BIGSERIAL	8 bytes	        1 to 9,223,372,036,854,775,807
--*********************************************************************************************************************--
--1) Basic PostgreSQL SERIAL example
CREATE TABLE fruits(
   id SERIAL PRIMARY KEY,
   name VARCHAR NOT NULL
);

INSERT INTO fruits(name)
VALUES('Orange');
--2) Getting the sequence name
--the following statement returns the recent value generated by the fruits_id_seq object:

SELECT currval(pg_get_serial_sequence('fruits', 'id'));
--3) Retrieving the generated value
--If you want to get the value generated by the sequence when you insert a new row into the table, you use the RETURNING id clause in the INSERT statement.
-- The sequence generator operation is not transaction-safe. It means that if two concurrent database connections attempt to get the next value from a sequence, each client will get a different value.

-- If one client rolls back the transaction, the sequence number of that client will be unused, creating a gap in the sequence.
INSERT INTO fruits(name)
VALUES('Banana')
RETURNING id;
--4) Adding a serial column to an existing table
--First, create a new table called baskets without a primary key column:
CREATE TABLE baskets(
    name VARCHAR(255) NOT NULL
);
--Second, add a SERIAL column to the baskets table:

ALTER TABLE baskets
ADD COLUMN id_baskets SERIAL PRIMARY KEY;

INSERT INTO baskets(name)
VALUES('Banana')
RETURNING id_baskets;
--5)  PostgreSQL pseudo-type SERIAL to create an auto-increment column for a table.

-- Custom Starting Value
CREATE SEQUENCE custom_seq START WITH 1000;
CREATE TABLE products (
    product_id INTEGER NOT NULL DEFAULT nextval('custom_seq'),
    name VARCHAR(100)
);
INSERT INTO products (product_id, name)
VALUES (DEFAULT, 'john_doe');
---- Force a specific value (careful with this!)
INSERT INTO products (product_id, name)
VALUES (100, 'special_user');


